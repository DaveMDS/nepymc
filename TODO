
TODO
====

 * EmcDialog API is bad, especially the buttons stuff...


CHANGES:
========

EmcUrl:
 * complete_cb => done_cb
 * progress_cb => prog_cb
 * done_cb(url, success, dest)
 * prog_cb(url, total, received)

EmcNotify
 * icon => image
 * close => delete()

MyClass(Singleton)  =>  MyClass(bases, metaclass=Singleton)


DOCUMENT IMAGE SPECIAL URLS SOMEWHERE
=====================================
 class EmcImage(EmcBackendableABC):
    """ An image object with support for remote url, with optional
        saving of the downloaded image to a local destination and a simple
        cache-to-file mechanism to avoid re-downloading the image again.

    Params:
        url: The url to load the image from, can be one of:
            * a local file fullpath
            * a real remote url (with autocache)
            * a tuple containing (url, dest) (deprecated method ??)  TODO
            * 'icon/*' to load an icon (aspect 1:1) from the theme
            * 'image/*' to load an image from the theme
            * 'special/style/text' to create a "special" image, supported
              styles are: 'folder', 'bd', 'cd', 'icon'
              The text will be inserted in the image.
            * 'special/vthumb/video_url' to create a thumb of a video file  TODO
            * None to "unset" the image  TODO
        dest: Local path to save the image to. If the dest path already exists
            the image will not be downloaded, but directly loaded from dest. TODO
            If dest is None the downloaded file will be saved in cache.
        icon: For the special style 'icon', you can here specify the icon
            to insert inside the special image.  TODO
        label2: For the special style 'icon', you can here specify the
            secondary label text.  TODO
   """





Just a scratchpad for the moment
================================


QML
---

function item_changed() {
    console.log("ITEM CHANGED", currentIndex)
    emcInfoDelayTimer.restart()
}

---

signal sgnItemIndexChanged(int index)

onSgnItemIndexChanged: {
    console.log("sgn " + index)
}

---

NumberAnimation on opacity {
    to: 0
    duration: 1000

    onRunningChanged: {
        if (!running) {
            console.log("Destroying...")
//                rect.destroy();
        }
    }
}

---

function show() {
    stateGroup.state = "visible"
}
function showMaximized() {
    stateGroup.state = "maximized"
}

---

function showModal(item) {
    mouseGrabber.opacity = 0.9 // FIXME: this should probably become a confluence state
    var currentFocusedItem = runtime.view.focusItem();
    var onClosedHandler = function() {
        mouseGrabber.opacity = 0;
        if (currentFocusedItem)
            currentFocusedItem.forceActiveFocus()
        item.closed.disconnect(onClosedHandler)
    }
    item.closed.connect(onClosedHandler)
    item.parent = confluence // ## restore parent?
    item.z = UIConstants.screenZValues.diplomaticImmunity
    item.open()
    item.forceActiveFocus()
}

function showFullScreen(item) {
    item.z = background.z + 2
    item.parent = confluence
    item.opacity = 1
    item.forceActiveFocus()
}